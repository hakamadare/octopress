<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | some guy on the Internet]]></title>
  <link href="http://someguyontheinter.net/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://someguyontheinter.net/"/>
  <updated>2014-06-09T23:35:13-04:00</updated>
  <id>http://someguyontheinter.net/</id>
  <author>
    <name><![CDATA[Steve Huff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[When Philosophy Majors Write Perl]]></title>
    <link href="http://someguyontheinter.net/blog/when-philosophy-majors-write-perl/"/>
    <updated>2014-06-09T22:24:35-04:00</updated>
    <id>http://someguyontheinter.net/blog/when-philosophy-majors-write-perl</id>
    <content type="html"><![CDATA[<p>In the interest of doing something other than <a href="http://www.fanpop.com/clubs/the-simpsons/images/7414384/title/old-man-yells-cloud-photo">yelling at clouds</a>, it occurred to me that rather than just <a href="http://someguyontheinter.net/blog/when-mathematicians-write-perl/">sniping</a> at other people&rsquo;s Perl, I might step up and demonstrate an alternate path.  So, here goes; reference code is at <a href="https://github.com/hakamadare/Math-Derivative/tree/legible">my convenience fork of Math::Derivative</a>.</p>

<p>The original:</p>

<p>```perl
sub Derivative1 {</p>

<pre><code>my ($x,$y)=@_;
my @y2;
my $n=$#{$x};
$y2[0]=($y-&gt;[1]-$y-&gt;[0])/($x-&gt;[1]-$x-&gt;[0]);
$y2[$n]=($y-&gt;[$n]-$y-&gt;[$n-1])/($x-&gt;[$n]-$x-&gt;[$n-1]);
my $i;
for($i=1; $i&lt;$n; $i++) {
    $y2[$i]=($y-&gt;[$i+1]-$y-&gt;[$i-1])/($x-&gt;[$i+1]-$x-&gt;[$i-1]);
}
return @y2;
</code></pre>

<p>}
```</p>

<p>My substitute:</p>

<p>```perl
sub Derivative1 {</p>

<pre><code>my( $x_vector, $y_vector ) = @_;
my( @derivatives );

my $p1 = _getNextPoint( $x_vector, $y_vector );
my $p2 = _getNextPoint( $x_vector, $y_vector );

push( @derivatives, _slope( $p1, $p2 ) );

while ( my $p3 = _getNextPoint( $x_vector, $y_vector ) ) {
    push( @derivatives, _slope( $p1, $p3 ) );

    $p1 = $p2;
    $p2 = $p3;
}

push( @derivatives, _slope( $p1, $p2 ) );

return @derivatives;
</code></pre>

<p>}</p>

<p>sub _getNextPoint {</p>

<pre><code>my( $x_vector, $y_vector ) = @_;
my $point;

my $x = shift( @{$x_vector} );
my $y = shift( @{$y_vector} );

if ( defined( $x ) &amp;&amp; defined( $y ) ) {
    $point-&gt;{x} = $x;
    $point-&gt;{y} = $y;
}

return $point;
</code></pre>

<p>}</p>

<p>sub _slope {</p>

<pre><code>my( $first, $second ) = @_;

my $dx = ( $second-&gt;{x} - $first-&gt;{x} );
my $dy = ( $second-&gt;{y} - $first-&gt;{y} );

my $slope = 0;
if ( defined( $dx ) &amp;&amp; defined( $dy ) &amp;&amp; ( $dx &gt; 0 ) ) {
    $slope = ( $dy / $dx );
}

return $slope;
</code></pre>

<p>}
```</p>

<p>Yikes.  I can&rsquo;t help but notice that my version ended up being on the order of four times as long; however, about one-third of that increase is whitespace.  To my eyes, the use of whitespace, indentation, and grouping characters helps break down the program into manageable, coherent chunks.  And to the best of my knowledge, I didn&rsquo;t cheat and use any syntax that wasn&rsquo;t available at the time the original was written.</p>

<p>It didn&rsquo;t help that there were no tests included with the individual module; I made one simple test, which the original code and my code both pass (<code>prove -l t</code> from the top-level directory to run the test).  There&rsquo;s still plenty of room for additional testing, never mind the fact that neither version has any reasonable amount of input validation, error handling etc.</p>

<p>So, there&rsquo;s my assertion that Perl doesn&rsquo;t have to look like gobbledegook.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Mathematicians Write Perl]]></title>
    <link href="http://someguyontheinter.net/blog/when-mathematicians-write-perl/"/>
    <updated>2014-06-02T20:30:57-04:00</updated>
    <id>http://someguyontheinter.net/blog/when-mathematicians-write-perl</id>
    <content type="html"><![CDATA[<p>As a followup (of sorts) to <a href="http://someguyontheinter.net/blog/an-entirely-needless-obstruction/">my last post</a>, I give you the following:</p>

<p>```perl
sub Derivative1 {</p>

<pre><code>my ($x,$y)=@_;
my @y2;
my $n=$#{$x};
$y2[0]=($y-&gt;[1]-$y-&gt;[0])/($x-&gt;[1]-$x-&gt;[0]);
$y2[$n]=($y-&gt;[$n]-$y-&gt;[$n-1])/($x-&gt;[$n]-$x-&gt;[$n-1]);
my $i;
for($i=1; $i&lt;$n; $i++) {
$y2[$i]=($y-&gt;[$i+1]-$y-&gt;[$i-1])/($x-&gt;[$i+1]-$x-&gt;[$i-1]);
}
return @y2;
</code></pre>

<p>}
```</p>

<p>That code is correct, right?  I sure hope so, because man do I not want to grovel over that and figure out what the hell it is doing.</p>

<p>This glorious manifestation of the human intellect comes from <a href="http://search.cpan.org/dist/Math-Derivative">Math::Derivative</a>, a Perl module which, well, does what it says on the tin: it provides functions that compute first and second derivatives of matrices of points.  The excerpt above is the first derivative function; the second derivative function is just like that, except more so.</p>

<p>To start out I should mention that it consistently provides plausible results (I&rsquo;m using it in code that tries to detect sudden changes in rate of change of numeric metrics over time, <em>i.e.</em> &ldquo;call for help if the database starts bloating up&rdquo;), but the style, oh, where to start?</p>

<ul>
<li>Um, whitespace?  Ever?  Between lines?  Between characters?  It&rsquo;s like reading someone&rsquo;s JavaScript after it&rsquo;s been through <a href="http://www.crockford.com/javascript/jsmin.html">JSMin</a> or some such.  Especially since Perl is tolerant of inserting newlines for clarity, there&rsquo;s no excuse.</li>
<li>The variable names.  Yes, I know, it&rsquo;s basically translating from the formula, but the combination of the one-character names with the one-character (or multi-character) sigils &ndash; seriously, <code>$n=$#{$x}</code>, I never want to see you again &ndash; is a recipe for headache.  Oh, and also you have to play detective to figure out what kind of data each variable represents?  Was it immediately obvious to you that the <code>$x</code> and <code>$y</code> that get passed into the subroutine are references to arrays of scalar values?  Yeah, it&rsquo;s clear in retrospect, but the <a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment">principle of least astonishment</a> is not just for user interfaces.</li>
<li>The mishmash of operators.  Considering the previous two points, the similarity between the <code>-</code> operator (in this case numerical subtraction) and the <code>-&gt;</code> operator (dereference) and the <code>&gt;</code> operator (numerical greater-than) makes the code look eerily like a <a href="https://en.wikipedia.org/wiki/Qr_code">QR code</a> or a <a href="https://en.wikipedia.org/wiki/Random-dot_stereogram">random-dot stereogram</a>.</li>
</ul>


<p>And so forth.  There&rsquo;s no good reason why this code has to be so obscure; sure, it&rsquo;s written in an older idiom, but even then it was terrible.  One thing at least the author can be proud of: the version of this module on CPAN is 0.01, written in 1995.</p>

<p>Apparently mathematicians get it right the first time. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Entirely Needless Obstruction]]></title>
    <link href="http://someguyontheinter.net/blog/an-entirely-needless-obstruction/"/>
    <updated>2014-05-20T14:19:41-04:00</updated>
    <id>http://someguyontheinter.net/blog/an-entirely-needless-obstruction</id>
    <content type="html"><![CDATA[<p>OK, see this?  This is why people say uncharitable things about Perl:</p>

<p>```perl
for (@cmd)
{</p>

<pre><code>next unless grep /^\Q$cmd\E$/, split(" ", $_-&gt;[1]);
$cmd_data = $_;
push @{$cmd_data-&gt;[3]}, ["filter", undef, undef, \&amp;parse_filter] if $_-&gt;[1] =~ /\bdescribe/;
for (@{$cmd_data-&gt;[3]})
{
</code></pre>

<p>  for (split(&ldquo; &rdquo;, $_&ndash;>[0]))
  {</p>

<pre><code>  (my $key = $_) =~ s/-/_/g;
  $keyword{$key} = undef;
</code></pre>

<p>  }</p>

<pre><code>}
last;
</code></pre>

<p>}
```</p>

<p>It doesn&rsquo;t matter whose code this is.  Suffice it to say that it</p>

<ul>
<li>is a crucial part of a publically-available, fairly popular program,</li>
<li>was last edited in 2011,</li>
<li>is standing in the way of my getting something accomplished today.</li>
</ul>


<p>Where to even start?  What&rsquo;s with the magical anonymous array-indexed data structures?  The positional parameters (gotta pass those <code>undef</code>s or everything is busted)?  The assignment of named variables to <code>$_</code> (yay!) and then going on to dereference <code>$_</code> instead of the named variables?</p>

<p>I&rsquo;m not sure I&rsquo;m willing to give this a pass as being <a href="http://www.modernperlbooks.com/mt/2009/03/turning-baby-perl-into-grownup-perl.html">baby Perl</a>; this is just a design that has been stretched comically (tragically?) far beyond its original limits.  This makes me cranky and sad.</p>

<p>Time to figure out what the hell is going on here so that I can patch this code.  <a href="http://www.modernperlbooks.com/mt/2011/01/cgi-is-okay-but-bad-code-is-irresponsible.html">Fantastic</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You Had One Job]]></title>
    <link href="http://someguyontheinter.net/blog/you-had-one-job/"/>
    <updated>2014-04-02T20:06:13-04:00</updated>
    <id>http://someguyontheinter.net/blog/you-had-one-job</id>
    <content type="html"><![CDATA[<p>On the way home today I encountered one of our housemates, also homeward bound, and as we came in the front door I was chattering happily about my second day at work.  I have tasks!  Tasks that I can perform!  This is really exciting.</p>

<p>I was, however, interrupted mid-sentence by a crash from the hallway, where Elijah (one of our cats) had knocked a box of tissues from the shelf to the floor.  He was standing by it staring at me, and I got the distinct sense that this was a warning shot across my bows, indicating that I should shut up about trivialities and focus on the much more important topic of his dinner.</p>

<p><img class="center" src="/images/one_job.jpg" width="746" height="550" title="&ldquo;you had one job&rdquo;" ></p>

<h3>Vim, Pathogen, and dirty submodules</h3>

<p>Earlier today I had been adding Vim plugins to my dotfiles repository, pulling them in as <a href="http://git-scm.com/docs/git-submodule">Git submodules</a> for use with <a href="https://github.com/tpope/vim-pathogen">Pathogen</a>.  I installed a couple of plugins and then generated the Vim help tags for them, which led to a minor unsightliness when the generated tags file showed up as untracked changes in my dotfiles directory.</p>

<p><a href="https://github.com/tpope">Tim Pope</a> suggests working around this problem by setting a <a href="http://git-scm.com/docs/gitignore">global excludes file</a>, but I am vaguely concerned that this will just create a landmine that I will step on at some future time when I want to be capturing some entirely unrelated file called <code>tags</code>.  Instead I discovered that <a href="http://www.nils-haldenwang.de/frameworks-and-tools/git/how-to-ignore-changes-in-git-submodules">this fellow has the exact same problem</a>, and his solution works great for me.  Thanks, Nils!</p>

<p>-steve</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Commit Messages]]></title>
    <link href="http://someguyontheinter.net/blog/github-commit-messages/"/>
    <updated>2014-03-30T18:30:53-04:00</updated>
    <id>http://someguyontheinter.net/blog/github-commit-messages</id>
    <content type="html"><![CDATA[<p>I&rsquo;m mad with power!  I have <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/APIReference/">CloudFront API access</a> and I&rsquo;m not afraid to use it!  I sound my <a href="https://en.wikipedia.org/wiki/Song_of_Myself">barbaric yawp</a> over the roofs of the world!</p>

<p>Reading the documentation for the <a href="http://osrc.dfm.io/">Open Source Report Card</a> led me to the following gem:</p>

<h3><a href="http://geeksta.net/geeklog/exploring-expressions-emotions-github-commit-messages/">Exploring Expressions of Emotion in GitHub Commit Messages</a></h3>

<p>It is exactly what it sounds like; NLP plus stats plus the GitHub datastream.  Some of my favorite bits:</p>

<ul>
<li>&ldquo;What stands out in the anger chart compared to the rest is the prominent gap between the "most angry language&rdquo; VimL and the other languages."</li>
<li>&ldquo;regexes are fun and pleasant to work with, in the same way that oranges are purple&rdquo;</li>
<li>&ldquo;lol, I dunno what I&rsquo;m doing (JavaScript)&rdquo;</li>
<li>&ldquo;Still, I&rsquo;m a bit surprised of the result, not because Perl is the winner, but because PHP does not seem to surprise people that often, which does not reflect my experience with this language at all.&rdquo;</li>
</ul>


<p>Seriously, just go read it.  It&rsquo;s awesome.</p>

<p>-steve</p>

<p>P.S. And of course, the section on swearing made me think of <a href="https://web.archive.org/web/20060529181955/http://blog.airdrop.org/archives/000014.html">The Terrible Mr. Grimshaw</a> (audio, NSFW).  Hooray once again for <a href="https://archive.org">archive.org</a>!</p>
]]></content>
  </entry>
  
</feed>
